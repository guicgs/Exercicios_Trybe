{"version":3,"sources":["exercise/04.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["Board","squares","Array","fill","renderSquare","i","className","onClick","Game","App","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_arrayLikeToArray","arr","len","length","arr2","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError"],"mappings":"+JAKA,SAASA,IAEP,IAAMC,EAAUC,MAAM,GAAGC,KAAK,MA6B9B,SAASC,EAAaC,GACpB,OACE,4BAAQC,UAAU,SAASC,QAAS,cACjCN,EAAQI,IAKf,OACE,6BAEE,yBAAKC,UAAU,UAAf,UACA,yBAAKA,UAAU,aACZF,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKE,UAAU,aACZF,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKE,UAAU,aACZF,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,4BAAQE,UAAU,UAAUC,QA/BhC,cA+BI,YAON,SAASC,IACP,OACE,yBAAKF,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACN,EAAD,QA+COS,UAJf,WACE,OAAO,kBAACD,EAAD,Q,gCCtHT,8CACe,SAASE,EAA4BC,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,YAAiBA,EAAGC,GACtD,IAAIC,EAAIC,OAAOC,UAAUC,SAASC,KAAKN,GAAGO,MAAM,GAAI,GAEpD,MADU,WAANL,GAAkBF,EAAEQ,cAAaN,EAAIF,EAAEQ,YAAYC,MAC7C,QAANP,GAAqB,QAANA,EAAoBX,MAAMmB,KAAKR,GACxC,cAANA,GAAqB,2CAA2CS,KAAKT,GAAW,YAAiBF,EAAGC,QAAxG,K,gCCPa,SAASW,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIrB,EAAI,EAAGsB,EAAO,IAAIzB,MAAMuB,GAAMpB,EAAIoB,EAAKpB,IAC9CsB,EAAKtB,GAAKmB,EAAInB,GAGhB,OAAOsB,EAPT,mC,8ECIe,SAASC,EAAeJ,EAAKnB,GAC1C,OCLa,SAAyBmB,GACtC,GAAItB,MAAM2B,QAAQL,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKnB,GACjD,GAAsB,qBAAXyB,QAA4BA,OAAOC,YAAYjB,OAAOU,GAAjE,CACA,IAAIQ,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKd,EAAIM,OAAOC,cAAmBE,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETrC,GAAK2B,EAAKN,SAAWrB,GAH8C4B,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBR,EAAKnB,IAAM,OAAAuC,EAAA,GAA2BpB,EAAKnB,IGLjF,WACb,MAAM,IAAIwC,UAAU,6IHIgF","file":"static/js/18.c4b1d82b.chunk.js","sourcesContent":["// useState: tic tac toe\n// http://localhost:3000/isolated/exercise/04.js\n\nimport React from 'react'\n\nfunction Board() {\n  // üê® squares is the state for this component. Add useState for squares\n  const squares = Array(9).fill(null)\n\n  // üê® We'll need the following bits of derived state:\n  // - nextValue ('X' or 'O')\n  // - winner ('X', 'O', or null)\n  // - status (`Winner: ${winner}`, `Scratch: Cat's game`, or `Next player: ${nextValue}`)\n  // üí∞ I've written the calculations for you! So you can use my utilities\n  // below to create these variables\n\n  // This is the function your square click handler will call. `square` should\n  // be an index. So if they click the center square, this will be `5`.\n  function selectSquare(square) {\n    // üê® first, if there's already winner or there's already a value at the\n    // given square index (like someone clicked a square that's already been\n    // clicked), then return early so we don't make any state changes\n    //\n    // ü¶â It's typically a bad idea to manipulate state in React because that\n    // can lead to subtle bugs that can easily slip into productions.\n    // üê® make a copy of the squares array (üí∞ `[...squares]` will do it!)\n    // üê® Set the value of the square that was selected\n    // üí∞ `squaresCopy[square] = nextValue`\n    //\n    // üê® set the squares to your copy\n  }\n\n  function restart() {\n    // üê® set the squares to `Array(9).fill(null)`\n  }\n\n  function renderSquare(i) {\n    return (\n      <button className=\"square\" onClick={() => selectSquare(i)}>\n        {squares[i]}\n      </button>\n    )\n  }\n\n  return (\n    <div>\n      {/* üê® put the status here */}\n      <div className=\"status\">STATUS</div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n      <button className=\"restart\" onClick={restart}>\n        restart\n      </button>\n    </div>\n  )\n}\n\nfunction Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  )\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction calculateStatus(winner, squares, nextValue) {\n  return winner\n    ? `Winner: ${winner}`\n    : squares.every(Boolean)\n    ? `Scratch: Cat's game`\n    : `Next player: ${nextValue}`\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction calculateNextValue(squares) {\n  const xSquaresCount = squares.filter(r => r === 'X').length\n  const oSquaresCount = squares.filter(r => r === 'O').length\n  return oSquaresCount === xSquaresCount ? 'X' : 'O'\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]\n    }\n  }\n  return null\n}\n\nfunction App() {\n  return <Game />\n}\n\nexport default App\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}